"""
Output a healpix skymap in a FITS-format file.

Can read with healpy functions as follows:

import healpy as hp
import numpy as np
m, h = hp.fitsfunc.read_map('test.fits', dtype=np.float32, hdu=1, h=True)
for k in h:
  print(k)

Note that HDU 0 can't be read by healpy, because it expects a healpix map
with an NSIDE parameter.  This doesn't exist for the primary HDU (HDU 0).
The data is found in HDU 1.

---

Some miscellaneous notes:

This is the header which is written by default, with
hp.fitsfunc.write_map('test.fits', m, nest=True, coord='C',
                      column_names=['PROB'])
where len(m)=12288=NPIX for NSIDE=32:
('XTENSION', 'BINTABLE')
('BITPIX', 8)
('NAXIS', 2)
('NAXIS1', 4096)
('NAXIS2', 12)
('PCOUNT', 0)
('GCOUNT', 1)
('TFIELDS', 1)
('TTYPE1', 'PROB')
('TFORM1', '1024E')
('PIXTYPE', 'HEALPIX')
('ORDERING', 'NESTED')
('COORDSYS', 'C')
('EXTNAME', 'xtension')
('NSIDE', 32)
('FIRSTPIX', 0)
('LASTPIX', 12287)
('INDXSCHM', 'IMPLICIT')
('OBJECT', 'FULLSKY')

The following header came from the file bayestar_no_virgo.fits:
('XTENSION', 'BINTABLE')
('BITPIX', 8)
('NAXIS', 2)
('NAXIS1', 32)
('NAXIS2', 786432)
('PCOUNT', 0)
('GCOUNT', 1)
('TFIELDS', 4)
('TTYPE1', 'PROB')
('TFORM1', 'D')
('TUNIT1', 'pix-1')
('TTYPE2', 'DISTMU')
('TFORM2', 'D')
('TUNIT2', 'Mpc')
('TTYPE3', 'DISTSIGMA')
('TFORM3', 'D')
('TUNIT3', 'Mpc')
('TTYPE4', 'DISTNORM')
('TFORM4', 'D')
('TUNIT4', 'Mpc-2')
('PIXTYPE', 'HEALPIX')
('ORDERING', 'NESTED')
('COORDSYS', 'C')
('NSIDE', 256)
('INDXSCHM', 'IMPLICIT')
('OBJECT', 'G297595')
('REFERENC', 'https://gracedb.ligo.org/events/G297595')
('INSTRUME', 'H1,L1')
('DATE-OBS', '2017-08-14T10:30:43.528731')
('MJD-OBS', 57979.43800380485)
('DATE', '2017-08-14T10:34:41.000000')
('CREATOR', 'BAYESTAR')
('ORIGIN', 'LIGO/Virgo')
('RUNTIME', 7.0)
('DISTMEAN', 582.1988352711343)
('DISTSTD', 160.8629721385865)
('LOGBCI', 6.146177896124343)
('LOGBSN', 60.68869160991267)
('VCSVERS', 'LALInference 1.9.4.1')
('VCSSTAT', 'CLEAN: All modifications committed')
('VCSREV', 'b002970a29277aab145627f8b5eea76f3a8c5829')
('DATE-BLD', '2017-08-03T19:22:48-0700')
('HISTORY', '')
('HISTORY', 'Generated by calling the following Python function:')
('HISTORY', 'lalinference.bayestar.sky_map.localize(event=<DetectorDisabledEvent(sing')
('HISTORY', "les=(<LigoLWSingleEvent(detector=u'H1', snr=7.2541618, phase=-1.265425,")
('HISTORY', "time=1186741861.535214)>, <LigoLWSingleEvent(detector=u'L1', snr=13.7434")
('HISTORY', "43, phase=1.1054605, time=1186741861.52678)>))>, waveform='o2-uberbank',")
('HISTORY', ' f_low=30, min_distance=None, max_distance=None, prior_distance_power=2,')
('HISTORY', " cosmology=False, method='toa_phoa_snr', nside=-1, chain_dump=None, enab")
('HISTORY', 'le_snr_series=True, f_high_truncate=0.95)')
('HISTORY', '')
('HISTORY', 'This was the command line that started the program:')
('HISTORY', 'bayestar_localize_lvalert --disable-detector V1 -o bayestar_no_virgo.fit')
('HISTORY', 's.gz')
"""
import logging
import healpy as hp
from astropy import units
from astropy.io import fits
from astropy.time import Time
from astropy.table import Table

from snewpdag.dag import Node

class FitsSkymap(Node):

  def __init__(self, in_field, filename, **kwargs):
    self.in_field = in_field
    self.filename = filename
    self.count = 0
    super().__init__(**kwargs)

  def write_file(self, m, burst_id, filename):
    # assume m only has one dimension for now
    t = Table([m], names=('PROB',), copy=False)
    t['PROB'].unit = units.pix**-1

    extra_header = [
      ('PIXTYPE', 'HEALPIX', 'HEALPIX pixelisation'),
      ('ORDERING', 'NESTED', 'Pixel ordering scheme: RING, NESTED, or NUNIQ'),
      ('COORDSYS', 'C', 'Ecliptic, Galactic or Celestial (equatorial)'),
      ('NSIDE', str(hp.npix2nside(len(m))), 'Resolution parameter of HEALPIX'),
      ('INDXSCHM', 'IMPLICIT', 'Indexing: IMPLICIT or EXPLICIT'),
      ('OBJECT', str(burst_id), 'Unique identifier for this event'),
      ('REFERENC', 'na', 'URL of this event'),
      ('INSTRUME', 'na', 'Instruments that triggered this event'),
      ('DATE-OBS', 'na', 'UTC date of the observation'),
      ('MJD-OBS', 'na', 'modified Julian date of the observation'),
      ('DATE', 'na', 'UTC date of file creation'),
      ('CREATOR', 'snewpdag', 'Program that created this file'),
      ('ORIGIN', 'SNEWS', 'Organization responsible for this FITS file'),
      ('RUNTIME', 'na', 'Runtime in seconds of the CREATOR program'),
      ('VCSVERS', 'na', 'Software version'),
      ('VCSREV', 'na', 'Software revision (Git)'),
      ('DATE-BLD', 'na', 'Software build date'),
    ]

    hdu = fits.table_to_hdu(t)
    hdu.header.extend(extra_header)
    hdulist = fits.HDUList([ fits.PrimaryHDU(), hdu ])
    hdulist.writeto(filename, overwrite=True)

  def alert(self, data):
    burst_id = data.get('burst_id', 0)
    m = data.get(self.in_field, None)
    if m == None:
      logger.warning('{}: no skymap to write'.format(self.name))
      return False

    #headers = []
    #hp.fitsfunc.write_map(self.filename, m, nest=True, coord='C',
    #                      column_names=['PROB'],
    #                      #column_units='pix-1',
    #                      #extra_header=headers,
    #                      dtype=np.float32, overwrite=True)
    fname = self.filename.format(self.name, self.count, burst_id)
    self.write_file(m, burst_id, fname)
    self.count += 1
    return True

